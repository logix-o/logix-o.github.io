{"version":3,"sources":["components/example/button/ExampleButton.module.scss","routes/example/detail/index.module.scss","routes/example/list/index.module.scss","serviceWorker.ts","routes/_404.tsx","components/example/button/index.tsx","models/example/types.ts","routes/example/detail/index.tsx","models/example/actions.ts","routes/example/list/index.tsx","app/index.tsx","models/example/reducer.ts","models/index.ts","index.tsx","components/hooks/useRouteChange.ts"],"names":["module","exports","Boolean","window","location","hostname","match","_404Route","console","log","ExampleButton","onPress","text","className","S","container","onClick","DELETE","ExampleDetailRoute","id","useParams","dispatch","useDispatch","history","useHistory","onDelete","useCallback","type","payload","deleteOne","parseInt","goBack","style","ExampleListRoute","list","useSelector","_state","example","map","item","key","push","PUSH_ANIM","from","opacity","transform","enter","leave","POP_ANIM","initialState","rootReducer","combineReducers","state","action","filter","_store","createStore","ReactDOM","render","store","useLocation","transitions","useTransition","pathname","useEffect","useRouteChange","props","div","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b611c5f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ExampleButton_container__1rJpj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"detail_container__18chv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"list_container__5gpan\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { FunctionComponent } from \"react\";\r\n\r\nexport const _404Route: FunctionComponent = () => {\r\n    console.log('error-404-page')\r\n\r\n    return (\r\n        <div>\r\n            <h1>Error 404</h1>\r\n        </div>\r\n    )\r\n}","import React, { FunctionComponent } from \"react\";\r\nimport S from './ExampleButton.module.scss';\r\n\r\ninterface Props {\r\n    text: string,\r\n    onPress?: () => void,\r\n}\r\n\r\nexport const ExampleButton: FunctionComponent<Props> = ({ onPress, text }) => {\r\n    return (\r\n        <div className={S.container} onClick={onPress}>\r\n            {text}\r\n        </div>\r\n    )\r\n}","export interface ExampleState {\r\n    list: Array<{\r\n        id: number,\r\n        text: string,\r\n    }>\r\n}\r\n\r\nexport const DELETE = 'example/DELETE'\r\n\r\ninterface DeleteAction {\r\n    type: typeof DELETE,\r\n    payload: number,\r\n}\r\n\r\nexport type ExampleAction = DeleteAction","import React, { FunctionComponent, useCallback } from \"react\";\r\nimport { useParams, useHistory } from \"react-router\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { ExampleButton } from \"components/example/button\";\r\nimport { deleteOne } from \"models/example/actions\";\r\nimport style from \"./index.module.scss\";\r\n\r\ninterface Params {\r\n    id: string,\r\n}\r\n\r\nexport const ExampleDetailRoute: FunctionComponent = () => {\r\n    const { id } = useParams<Params>()\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const onDelete = useCallback(\r\n        () => {\r\n            dispatch(deleteOne(parseInt(id)))\r\n            history.goBack()\r\n        },\r\n        [id, dispatch, history],\r\n    )\r\n\r\n    return (\r\n        <div className={style.container}>\r\n            <ExampleButton text={`删除${id}`} onPress={onDelete} />\r\n        </div>\r\n    )\r\n}","import { DELETE } from \"./types\";\r\n\r\nexport const deleteOne = (id: number) => {\r\n    return {\r\n        type: DELETE,\r\n        payload: id,\r\n    }\r\n}","import React, { FunctionComponent } from \"react\";\r\nimport { ExampleButton } from \"components/example/button\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppState } from \"models\";\r\nimport { ExampleState } from \"models/example/types\";\r\nimport style from \"./index.module.scss\";\r\n// import background from \"assets/background.jpg\";\r\n\r\nexport const ExampleListRoute: FunctionComponent = () => {\r\n    const history = useHistory()\r\n    const { list } = useSelector<AppState, ExampleState>(_state => _state.example)\r\n\r\n    return (\r\n        <div className={style.container}>\r\n            {\r\n                list.map(item => <ExampleButton key={item.id} text={item.text} onPress={() => history.push(`/example/detail/${item.id}`)} />)\r\n            }\r\n            {/* <img alt='' src={background} /> */}\r\n        </div>\r\n    )\r\n}\r\n","import React, { FunctionComponent, Fragment } from \"react\"\r\nimport { Switch, Route, useLocation, useHistory } from \"react-router-dom\"\r\nimport { _404Route } from \"routes/_404\"\r\nimport { ExampleDetailRoute } from \"routes/example/detail\"\r\nimport { ExampleListRoute } from \"routes/example/list\"\r\nimport { useTransition, animated } from 'react-spring'\r\nimport useRouteChange from 'components/hooks/useRouteChange'\r\n\r\nconst PUSH_ANIM = {\r\n    from: { opacity: 0, transform: 'translate3d(100%,0,0)' },\r\n    enter: { opacity: 1, transform: 'translate3d(0%,0,0)' },\r\n    leave: { opacity: 0, transform: 'translate3d(-50%,0,0)' },\r\n}\r\n\r\nconst POP_ANIM = {\r\n    from: { opacity: 0, transform: 'translate3d(-100%,0,0)' },\r\n    enter: { opacity: 1, transform: 'translate3d(0%,0,0)' },\r\n    leave: { opacity: 0, transform: 'translate3d(50%,0,0)' },\r\n}\r\n\r\nexport const App: FunctionComponent = () => {\r\n    const location = useLocation()\r\n    const history = useHistory()\r\n    const transitions = useTransition(location, location => location.pathname, history.action === 'PUSH' ? PUSH_ANIM : POP_ANIM)\r\n\r\n    useRouteChange()\r\n    \r\n    return (\r\n        <Fragment>\r\n            {\r\n                transitions.map(({ item, props, key }) => (\r\n                    /** 最多出现两个switch，用于描述一个路由页的消失和另一个路由页的出现 */\r\n                    <animated.div\r\n                        key={key}\r\n                        style={props}\r\n                        className='route'\r\n                    >\r\n                        <Switch location={item}>\r\n                            {/** 仅渲染第一个匹配的路由 */}\r\n                            <Route exact path='/example/list' component={ExampleListRoute} />\r\n                            <Route exact path='/example/detail/:id' component={ExampleDetailRoute} />\r\n                            <Route component={_404Route} />\r\n                        </Switch>\r\n                    </animated.div>\r\n                ))\r\n            }\r\n        </Fragment>\r\n    )\r\n}","import { ExampleState, ExampleAction, DELETE } from \"./types\";\r\n\r\nconst initialState: ExampleState = {\r\n    list: [\r\n        {\r\n            id: 1,\r\n            text: 'bat-man',\r\n        },\r\n        {\r\n            id: 2,\r\n            text: 'spider-man',\r\n        },\r\n        {\r\n            id: 3,\r\n            text: 'one-punch-man'\r\n        },\r\n    ],\r\n}\r\n\r\nexport default function exampleReducer (state = initialState, action: ExampleAction): ExampleState {\r\n    switch (action.type) {\r\n        case DELETE:\r\n            return {\r\n                ...state,\r\n                list: state.list.filter(item => item.id !== action.payload),\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import exampleReducer from \"./example/reducer\";\r\nimport { combineReducers, createStore } from \"redux\"\r\n\r\nconst rootReducer = combineReducers({\r\n    example: exampleReducer,\r\n})\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>\r\n\r\nexport default function configureStore() {\r\n    const store = createStore(rootReducer)\r\n    return store\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { App } from 'app';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { Provider } from \"react-redux\";\r\nimport configureStore from 'models';\r\n\r\nconst _store = configureStore()\r\n\r\nReactDOM.render(\r\n    <Provider store={_store}>\r\n        <HashRouter>\r\n            <App />\r\n        </HashRouter>\r\n    </Provider>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { useEffect } from \"react\"\r\nimport { useLocation } from \"react-router\"\r\n\r\n/**\r\n * @description 监听路由的变化\r\n * @example 用于路由级别的统计埋点；放在总路由的入口即可\r\n */\r\nexport default function useRouteChange() {\r\n    let location = useLocation()\r\n\r\n    useEffect(\r\n        () => {\r\n            // console.log('current-route', location)\r\n        },\r\n        [location],\r\n    )\r\n}"],"sourceRoot":""}