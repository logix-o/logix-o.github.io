{"version":3,"sources":["components/example/button/ExampleButton.module.scss","routes/example/detail/index.module.scss","routes/example/list/index.module.scss","serviceWorker.ts","routes/_404.tsx","components/example/button/index.tsx","models/example/types.ts","routes/example/detail/index.tsx","models/example/actions.ts","routes/example/list/index.tsx","styles/spring.ts","app/index.tsx","components/hooks/useRouteChange.ts","models/example/reducer.ts","models/reducers.ts","index.tsx","models/index.ts"],"names":["module","exports","Boolean","window","location","hostname","match","_404Route","console","log","ExampleButton","onPress","text","className","S","container","onClick","DELETE","ExampleDetailRoute","id","useParams","dispatch","useDispatch","history","useHistory","onDelete","useCallback","type","payload","deleteOne","parseInt","goBack","style","ExampleListRoute","list","useSelector","_state","example","map","item","key","push","SpringTransition","fromLeft","from","opacity","transform","enter","leave","fromRight","App","useLocation","transitions","useTransition","pathname","action","useEffect","useRouteChange","props","div","exact","path","component","initialState","rootReducer","combineReducers","state","filter","_store","store","createStore","devToolsEnhancer","process","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73c48136.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ExampleButton_container__iQo_-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"detail_container__yyH98\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"list_container__1M0ht\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { FunctionComponent } from \"react\";\n\nexport const _404Route: FunctionComponent = () => {\n    console.log('error-404-page')\n\n    return (\n        <div>\n            <h1>Error 404</h1>\n        </div>\n    )\n}","import React, { FunctionComponent } from \"react\";\nimport S from './ExampleButton.module.scss';\n\ninterface Props {\n    text: string,\n    onPress?: () => void,\n}\n\nexport const ExampleButton: FunctionComponent<Props> = ({ onPress, text }) => {\n    return (\n        <div className={S.container} onClick={onPress}>\n            {text}\n        </div>\n    )\n}","export interface ExampleState {\n    list: Array<{\n        id: number,\n        text: string,\n    }>\n}\n\nexport const DELETE = 'example/DELETE'\n\ninterface DeleteAction {\n    type: typeof DELETE,\n    payload: number,\n}\n\nexport type ExampleAction = DeleteAction","import React, { FunctionComponent, useCallback } from \"react\";\nimport { useParams, useHistory } from \"react-router\";\nimport { useDispatch } from \"react-redux\";\nimport { ExampleButton } from \"components/example/button\";\nimport { deleteOne } from \"models/example/actions\";\nimport style from \"./index.module.scss\";\n\ninterface Params {\n    id: string,\n}\n\nexport const ExampleDetailRoute: FunctionComponent = () => {\n    const { id } = useParams<Params>()\n    const dispatch = useDispatch()\n    const history = useHistory()\n    const onDelete = useCallback(\n        () => {\n            dispatch(deleteOne(parseInt(id)))\n            history.goBack()\n        },\n        [id, dispatch, history],\n    )\n\n    return (\n        <div className={style.container}>\n            <ExampleButton text={`删除${id}`} onPress={onDelete} />\n        </div>\n    )\n}","import { DELETE } from \"./types\";\n\nexport const deleteOne = (id: number) => {\n    return {\n        type: DELETE,\n        payload: id,\n    }\n}","import React, { FunctionComponent } from \"react\";\nimport { ExampleButton } from \"components/example/button\";\nimport { useHistory } from \"react-router\";\nimport { useSelector } from \"react-redux\";\nimport { AppState } from \"models\";\nimport { ExampleState } from \"models/example/types\";\nimport style from \"./index.module.scss\";\n// import background from \"assets/background.jpg\";\n\nexport const ExampleListRoute: FunctionComponent = () => {\n    const history = useHistory()\n    const { list } = useSelector<AppState, ExampleState>(_state => _state.example)\n\n    return (\n        <div className={style.container}>\n            {\n                list.map(item => <ExampleButton key={item.id} text={item.text} onPress={() => history.push(`/example/detail/${item.id}`)} />)\n            }\n            {/* <img alt='' src={background} /> */}\n        </div>\n    )\n}\n","const fromLeft = {\n    from: { opacity: 0, transform: 'translate3d(-100%,0,0)' },\n    enter: { opacity: 1, transform: 'translate3d(0%,0,0)' },\n    leave: { opacity: 0, transform: 'translate3d(50%,0,0)' },\n}\n\nconst fromRight = {\n    from: { opacity: 0, transform: 'translate3d(100%,0,0)' },\n    enter: { opacity: 1, transform: 'translate3d(0%,0,0)' },\n    leave: { opacity: 0, transform: 'translate3d(-50%,0,0)' },\n}\n\nexport const SpringTransition = {\n    fromLeft,\n    fromRight,\n}","import React, { FunctionComponent, Fragment } from \"react\"\nimport { Switch, Route, useLocation, useHistory } from \"react-router-dom\"\nimport { _404Route } from \"routes/_404\"\nimport { ExampleDetailRoute } from \"routes/example/detail\"\nimport { ExampleListRoute } from \"routes/example/list\"\nimport { useTransition, animated } from 'react-spring'\nimport useRouteChange from 'components/hooks/useRouteChange'\nimport { SpringTransition } from \"styles/spring\"\n\nexport const App: FunctionComponent = () => {\n    const location = useLocation()\n    const history = useHistory()\n    const transitions = useTransition(\n        location,\n        location => location.pathname,\n        history.action === 'PUSH' ? SpringTransition.fromRight : SpringTransition.fromLeft,\n    )\n\n    useRouteChange()\n\n    return (\n        <Fragment>\n            {\n                transitions.map(({ item, props, key }) => (\n                    /** 最多出现两个switch，用于描述一个路由页的消失和另一个路由页的出现 */\n                    <animated.div\n                        key={key}\n                        style={props}\n                        className='route'\n                    >\n                        <Switch location={item}>\n                            {/** 仅渲染第一个匹配的路由 */}\n                            <Route exact path='/example/list' component={ExampleListRoute} />\n                            <Route exact path='/example/detail/:id' component={ExampleDetailRoute} />\n                            <Route component={_404Route} />\n                        </Switch>\n                    </animated.div>\n                ))\n            }\n        </Fragment>\n    )\n}","import { useEffect } from \"react\"\nimport { useLocation } from \"react-router\"\n\n/**\n * @description 监听路由的变化\n * @example 用于路由级别的统计埋点；放在总路由的入口即可\n */\nexport default function useRouteChange() {\n    let location = useLocation()\n\n    useEffect(\n        () => {\n            // console.log('current-route', location)\n        },\n        [location],\n    )\n}","import { ExampleState, ExampleAction, DELETE } from \"./types\";\n\nconst initialState: ExampleState = {\n    list: [\n        {\n            id: 1,\n            text: 'bat-man',\n        },\n        {\n            id: 2,\n            text: 'spider-man',\n        },\n        {\n            id: 3,\n            text: 'one-punch-man'\n        },\n    ],\n}\n\nexport default function exampleReducer (state = initialState, action: ExampleAction): ExampleState {\n    switch (action.type) {\n        case DELETE:\n            return {\n                ...state,\n                list: state.list.filter(item => item.id !== action.payload),\n            }\n        default:\n            return state\n    }\n}","import exampleReducer from \"./example/reducer\";\nimport { combineReducers } from \"redux\"\n\nconst rootReducer = combineReducers({\n    example: exampleReducer,\n})\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport { App } from 'app';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from \"react-redux\";\nimport configureStore from 'models';\n\nconst _store = configureStore()\n\nconst renderApp = () => (\n    ReactDOM.render(\n        <Provider store={_store}>\n            <HashRouter>\n                <App />\n            </HashRouter>\n        </Provider>,\n        document.getElementById('root'),\n    )\n)\n\nif (process.env.NODE_ENV !== 'production' && (module as any).hot) {\n    (module as any).hot.accept('./app', renderApp)\n}\n\nrenderApp()\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore } from \"redux\"\nimport { devToolsEnhancer } from 'redux-devtools-extension';\nimport rootReducer from './reducers'\n\nexport type AppState = ReturnType<typeof rootReducer>\n\nexport default function configureStore() {\n    const store = createStore(rootReducer, devToolsEnhancer({}))\n    console.log('curren-mode', process.env.NODE_ENV)\n    if (process.env.NODE_ENV !== 'production' && (module as any).hot) {\n        (module as any).hot.accept('./reducers', () => store.replaceReducer(rootReducer))\n    }\n\n    return store\n}"],"sourceRoot":""}